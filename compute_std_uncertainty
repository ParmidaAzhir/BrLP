import os
import numpy as np
import nibabel as nib
import pandas as pd
import argparse
import matplotlib.pyplot as plt

def compute_std_from_ensemble(subject_path, output_dir, expected_count=64):
    nii_files = sorted([
        f for f in os.listdir(subject_path)
        if f.startswith("pred-mri-") and f.endswith(".nii.gz")
    ])

    if len(nii_files) != expected_count:
        print(f" {os.path.basename(subject_path)} skipped - expected {expected_count} files, found {len(nii_files)}")
        return

    sum_ = None
    sum_sq = None
    img_shape = None

    for i, fname in enumerate(nii_files):
        img = nib.load(os.path.join(subject_path, fname))
        data = img.get_fdata()

        if sum_ is None:
            sum_ = np.zeros_like(data)
            sum_sq = np.zeros_like(data)
            img_shape = data.shape

        sum_ += data
        sum_sq += data ** 2

    mean = sum_ / expected_count
    var = (sum_sq / expected_count) - (mean ** 2)
    std_map = np.sqrt(np.clip(var, 0, None))  # avoid negatives due to precision

    print(f"{os.path.basename(subject_path)}: STD min={std_map.min():.4f}, max={std_map.max():.4f}, mean={std_map.mean():.4f}")

    # Save output
    ref_img = nib.load(os.path.join(subject_path, nii_files[0]))
    subject_id = os.path.basename(subject_path)
    subj_out_dir = os.path.join(output_dir, subject_id)
    os.makedirs(subj_out_dir, exist_ok=True)

    std_img = nib.Nifti1Image(std_map, affine=ref_img.affine, header=ref_img.header)
    nib.save(std_img, os.path.join(subj_out_dir, "uncertainty_std_map.nii.gz"))

    # Save axial slices
    slice_dir = os.path.join(subj_out_dir, "uncertainty_slices_std_axial")
    os.makedirs(slice_dir, exist_ok=True)

    for i in range(std_map.shape[2]):
        slc = std_map[:, :, i]
        if np.all(slc == 0):
            continue

        plt.figure(figsize=(5, 5))
        plt.imshow(slc.T, cmap='hot', origin='lower')
        plt.colorbar(label='STD')
        plt.title(f"{subject_id} - Slice {i}")
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(os.path.join(slice_dir, f"slice_{i:03}.png"), bbox_inches='tight', dpi=150)
        plt.close()

def main():
    parser = argparse.ArgumentParser(description="Compute STD-based uncertainty maps from MRI predictions.")
    parser.add_argument('--n_dilations', type=int, default=4, help='(Unused) placeholder for CLI format compatibility')
    parser.add_argument('--input_csv', type=str, required=True, help='CSV file with paths to subject folders')
    parser.add_argument('--output_csv', type=str, required=True, help='Output directory for uncertainty results')

    args = parser.parse_args()

    if not os.path.isfile(args.input_csv):
        print(" Input CSV not found.")
        return

    subject_paths = pd.read_csv(args.input_csv, header=None)[0].tolist()
    os.makedirs(args.output_csv, exist_ok=True)

    for subject_path in subject_paths:
        if os.path.isdir(subject_path):
            compute_std_from_ensemble(subject_path, args.output_csv)
        else:
            print(f"Invalid path: {subject_path}")

    print(" All subjects done.")

if __name__ == "__main__":
    main()
